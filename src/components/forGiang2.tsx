"use client";

import React, { useEffect, useState } from 'react';

const WomensDay: React.FC = () => {
    // C√°c hook lu√¥n ƒë∆∞·ª£c g·ªçi b·∫•t k·ªÉ mounted hay kh√¥ng
    const [mounted, setMounted] = useState(false);
    const confettiPieces = Array.from({ length: 50 });

    const getRandomColor = () => {
        const colors = ['#FFC0CB', '#FFD700', '#ADFF2F', '#FF69B4', '#87CEFA', '#FF4500'];
        return colors[Math.floor(Math.random() * colors.length)];
    };

    // M·∫£ng ch·ª©a c√°c d√≤ng n·ªôi dung c·∫ßn hi·ªÉn th·ªã theo hi·ªáu ·ª©ng g√µ ch·ªØ.
    const textLines = [
        "Kh√¥ng bi·∫øt c√≥ ƒë∆∞·ª£c l√† ng∆∞·ªùi ch√∫c em s·ªõm nh·∫•t h√¥ng ...",
        "Nh∆∞ng m√† b√¢y gi·ªù, 1h s√°ng r√πiiii",
        "Ch√∫c em c√≥ m·ªôt ng√†y th·∫≠t vui v·∫ª, h·∫°nh ph√∫c v√† ·∫•m √°p n√®",
        "D√π c√≥ g·∫∑p kh√≥ khƒÉn, th·∫•t b·∫°i hay g√¨ chƒÉng n·ªØa, h√£y nh·ªõ r·∫±ng:",
        "Anh v·∫´n ·ªü ƒë√¢y ...",
        "ƒê·ª£i em",
        "ƒê·ªìng √Ω",
        "14/3 n√†y ƒëi ch∆°i v·ªõi anh nha"
    ];
    const [displayedLines, setDisplayedLines] = useState<string[]>([]);
    const [currentLine, setCurrentLine] = useState<string>('');
    const [currentLineIndex, setCurrentLineIndex] = useState<number>(0);
    const [charIndex, setCharIndex] = useState<number>(0);

    // State cho v·ªã tr√≠ c·ªßa n√∫t "kh√¥ng".
    // Ban ƒë·∫ßu ƒë·∫∑t c√°ch t√¢m 80px v·ªÅ b√™n ph·∫£i (v√† top = 0).
    const [noButtonPos, setNoButtonPos] = useState<{ top: number; left: number }>({ top: 0, left: 80 });

    // ƒê√°nh d·∫•u khi component ƒë∆∞·ª£c mount
    useEffect(() => {
        setMounted(true);
    }, []);

    // Hi·ªáu ·ª©ng g√µ ch·ªØ ch·ªâ ch·∫°y sau khi ƒë√£ mount
    useEffect(() => {
        if (!mounted) return;

        if (currentLineIndex < textLines.length) {
            if (charIndex < textLines[currentLineIndex].length) {
                const timeout = setTimeout(() => {
                    setCurrentLine(textLines[currentLineIndex].substring(0, charIndex + 1));
                    setCharIndex(charIndex + 1);
                }, 100); // t·ªëc ƒë·ªô g√µ ch·ªØ (ms)
                return () => clearTimeout(timeout);
            } else {
                const timeout = setTimeout(() => {
                    setDisplayedLines(prev => [...prev, textLines[currentLineIndex]]);
                    setCurrentLineIndex(currentLineIndex + 1);
                    setCurrentLine('');
                    setCharIndex(0);
                }, 1000); // th·ªùi gian ch·ªù gi·ªØa c√°c d√≤ng (ms)
                return () => clearTimeout(timeout);
            }
        }
    }, [mounted, charIndex, currentLineIndex, textLines]);

    // X·ª≠ l√Ω khi nh·∫•n n√∫t "c√≥"
    const handleYesClick = () => {
        alert('·ª™m... anh kh√¥ng bi·∫øt em c√≥ ·∫•n hay kh√¥ng, t·∫°i anh kh√¥ng k·ªãp l√†m th√™m g√¨ n·ªØa, mama gi·ª•c anh ng·ªß r√πi :< nh·∫Øn cho anh nha');
    };

    // Khi hover v√†o n√∫t "kh√¥ng": thay ƒë·ªïi v·ªã tr√≠ c·ªßa n√∫t, v·ªõi offset ng·∫´u nhi√™n r·ªông h∆°n
    const handleNoHover = () => {
        // C·∫≠p nh·∫≠t ph·∫°m vi di chuy·ªÉn: horizontal t·ª´ -200 ƒë·∫øn 200, vertical t·ª´ -100 ƒë·∫øn 100.
        const randomOffsetX = Math.floor(Math.random() * 401) - 200; // t·ª´ -200 ƒë·∫øn 200
        const randomOffsetY = Math.floor(Math.random() * 201) - 100;   // t·ª´ -100 ƒë·∫øn 100
        setNoButtonPos({ top: randomOffsetY, left: 80 + randomOffsetX });
    };

    return (
        <div className="container">
            {!mounted ? null : (
                <>
                    <h1 className="animated-text">Ch√∫c m·ª´ng ng√†y 8/3!</h1>
                    <p className="subtext">Mu·ªën g·ª≠i m·ªôt b√¥ng hoa ƒë·∫øn b√¥ng hoa ƒë·∫πp nh·∫•t ƒëang ƒë·ªçc c∆° ü•∫ü•∫ü•∫</p>

                    <div className="typing-container">
                        {displayedLines.map((line, index) => (
                            <p key={index} dangerouslySetInnerHTML={{ __html: line }} />
                        ))}
                        {currentLineIndex < textLines.length && (
                            <p>
                                <span dangerouslySetInnerHTML={{ __html: currentLine }} />
                                <span className="cursor">|</span>
                            </p>
                        )}
                    </div>

                    {/* Hi·ªÉn th·ªã n√∫t sau khi t·∫•t c·∫£ c√°c d√≤ng ch·ªØ ƒë√£ ƒë∆∞·ª£c g√µ */}
                    {currentLineIndex >= textLines.length && (
                        <div className="button-group">
                            <button
                                className="yes-button"
                                onClick={handleYesClick}
                                style={{
                                    position: 'absolute',
                                    top: '0px',
                                    left: 'calc(50% - 80px)',
                                    transform: 'translateX(-50%)',
                                }}
                            >
                                D·∫°·∫°·∫°·∫°·∫°·∫°
                            </button>
                            <button
                                className="no-button"
                                onMouseEnter={handleNoHover}
                                style={{
                                    position: 'absolute',
                                    top: `${noButtonPos.top}px`,
                                    left: `calc(50% + ${noButtonPos.left}px)`,
                                    transform: 'translateX(-50%)',
                                }}
                            >
                                KH√îNG !!!
                            </button>
                        </div>
                    )}

                    <div className="confetti-container">
                        {confettiPieces.map((_, i) => (
                            <div
                                key={i}
                                className="confetti-piece"
                                style={{
                                    left: `${Math.random() * 100}%`,
                                    animationDelay: `${Math.random() * 5}s`,
                                    backgroundColor: getRandomColor(),
                                }}
                            />
                        ))}
                    </div>
                </>
            )}

            <style>{`
        .container {
          position: relative;
          text-align: center;
          padding: 50px;
          background: linear-gradient(to right, #ff9a9e, #fad0c4);
          overflow: hidden;
          min-height: 100vh;
        }
        .animated-text {
          font-size: 3rem;
          color: #fff;
          animation: bounce 2s infinite;
          margin-bottom: 20px;
        }
        .subtext {
          font-size: 1.5rem;
          color: #fff;
          margin-bottom: 40px;
        }
        .typing-container {
          font-family: 'Courier New', Courier, monospace;
          font-size: 1.2rem;
          line-height: 1.8;
          color: #fff;
          margin-bottom: 40px;
        }
        .cursor {
          display: inline-block;
          margin-left: 2px;
          animation: blink 1s step-end infinite;
        }
        @keyframes blink {
          from, to { opacity: 0; }
          50% { opacity: 1; }
        }
        .confetti-container {
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          pointer-events: none;
          overflow: hidden;
        }
        .confetti-piece {
          position: absolute;
          width: 10px;
          height: 10px;
          opacity: 0.7;
          animation: fall 5s linear infinite;
        }
        @keyframes bounce {
          0%, 100% {
            transform: translateY(0);
          }
          50% {
            transform: translateY(-20px);
          }
        }
        @keyframes fall {
          0% {
            transform: translateY(-10%);
            opacity: 1;
          }
          100% {
            transform: translateY(110vh);
            opacity: 0;
          }
        }
        .button-group {
          position: relative;
          width: 100%;
          height: 100px;
          margin-top: 20px;
        }
        .button-group .yes-button,
        .button-group .no-button {
          font-size: 1.2rem;
          padding: 10px 20px;
          border-radius: 8px;
          border: none;
          cursor: pointer;
          transition: background-color 0.3s, transform 0.3s;
        }
        .button-group .yes-button {
          background-color: #28a745;
          color: white;
        }
        .button-group .no-button {
          background-color: #dc3545;
          color: white;
        }
        .button-group .yes-button:hover,
        .button-group .no-button:hover {
          transform: scale(1.1);
        }
      `}</style>
        </div>
    );
};

export default WomensDay;
